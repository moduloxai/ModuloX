syntax = "proto3";

package modulox.v1;

option go_package = "github.com/user/modulox/api/proto";

// AgentService defines the gRPC service for agent communication
service AgentService {
  // Execute runs a task on an agent
  rpc Execute(ExecuteRequest) returns (ExecuteResponse) {}
  
  // StreamEvents allows agents to subscribe to events
  rpc StreamEvents(EventRequest) returns (stream Event) {}
  
  // PublishEvent publishes an event to the event system
  rpc PublishEvent(Event) returns (PublishResponse) {}
  
  // SyncState synchronizes state between agents
  rpc SyncState(SyncRequest) returns (SyncResponse) {}
}

// ExecuteRequest represents a task execution request
message ExecuteRequest {
  string agent_id = 1;
  string task = 2;
  map<string, string> metadata = 3;
}

// ExecuteResponse contains the result of task execution
message ExecuteResponse {
  string result = 1;
  string error = 2;
  map<string, string> metadata = 3;
}

// Event represents a system event
message Event {
  string type = 1;
  string payload = 2;
  string source_agent = 3;
  int64 timestamp = 4;
  map<string, string> metadata = 5;
}

// EventRequest for subscribing to events
message EventRequest {
  string agent_id = 1;
  repeated string event_types = 2;
}

// PublishResponse for event publishing confirmation
message PublishResponse {
  bool success = 1;
  string error = 2;
}

// SyncRequest for state synchronization
message SyncRequest {
  string agent_id = 1;
  string key = 2;
  string value = 3;
  int64 version = 4;
}

// SyncResponse for state sync confirmation
message SyncResponse {
  bool success = 1;
  string error = 2;
  int64 version = 3;
}
